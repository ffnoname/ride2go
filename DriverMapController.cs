// This file has been autogenerated from a class added in the UI designer.

using System;

using UIKit;
using MapKit;
using CoreLocation;
using System.Timers;
using Plugin.Geolocator.Abstractions;

namespace UberBlablaCar2Go
{
	public partial class DriverMapController : UIViewController, IDestination
	{

		private MKPolyline firstRoute;
		public DriverMapController (IntPtr handle) : base (handle)
		{
		}

		Timer timer;

		Position driverPosition;
		string destination;
		public void SetDestination (Position driverPosition, string destination)
		{
			this.driverPosition = driverPosition;
			this.destination = destination;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.MapView.ShowsUserLocation = true;
			Application.CenterMap (this.MapView, 48.807363, 9.214934, 1.5);
			this.MapView.Delegate = new MapDelegate ();

			this.DrawInitialRoute ();
		}

		Position destinationPosition;
		private async void DrawInitialRoute ()
		{
			this.destinationPosition = await Ride2GoService.GetPosition (destination);

			var routeResult = await Ride2GoService.GetRoute (this.driverPosition, destinationPosition, null);
			this.firstRoute = MKPolyline.FromCoordinates (routeResult.Locations);
			this.MapView.AddOverlay (this.firstRoute);
		}



		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			this.timer = new Timer ();
			timer.Interval = 4000;
			timer.Start ();
			timer.Elapsed += this.TimerTick;
		}

		void TimerTick (object sender, ElapsedEventArgs e)
		{
			this.TimerHasTicked ();
		}

		private async void TimerHasTicked ()
		{
			var rider = await Ride2GoService.GetRiderNearby ();
			if (rider != null) 
			{
				this.timer.Elapsed -= TimerTick;
				Application.PresentOKAlert ("Passenger found", "you are being rerouted", 
				                            this,
				                            () => OverlayNewRoute(rider));
			}
		}

		private async void OverlayNewRoute (Rider rider)
		{
			this.MapView.RemoveOverlay (this.firstRoute);

			//rider.Position
			var pickupPoint = new Position ();
			pickupPoint.Latitude = rider.Lat;
			pickupPoint.Longitude = rider.Lon;

			var routeResult = await Ride2GoService.GetRoute (this.driverPosition, this.destinationPosition, pickupPoint);
			this.MapView.AddOverlay (MKPolyline.FromCoordinates (routeResult.Locations));
			var annotation = new BasicMapAnnotation (new CLLocationCoordinate2D (rider.Lat,rider.Lon), rider.Name);
			this.MapView.AddAnnotation (annotation);
		}

	}

	class BasicMapAnnotation : MKAnnotation
	{
		CLLocationCoordinate2D coord;
		string title;

		public override CLLocationCoordinate2D Coordinate { get { return coord; } }
		public override void SetCoordinate (CLLocationCoordinate2D value)
		{
			coord = value;
		}
		public override string Title { get { return title; } }
		public override string Subtitle { get { return ""; } }
		public BasicMapAnnotation (CLLocationCoordinate2D coordinate, string title)
		{
			this.coord = coordinate;
			this.title = title;
		}
	}

	public class MapDelegate : MKMapViewDelegate
	{
		public static int counter = 1;
		public override MKOverlayView GetViewForOverlay (MKMapView mapView, IMKOverlay overlay)
		{
			var polygonOverlay = overlay as MKPolyline;
			var polygonView = new MKPolylineView (polygonOverlay);
			//polygonView.FillColor = UIColor.Blue;
			if (counter == 1) {
				polygonView.StrokeColor = UIColor.Blue;
			} else {
				polygonView.StrokeColor = UIColor.Red;
			}
			polygonView.LineWidth = 10;
			polygonView.Alpha = 0.4f;
			return polygonView;
		}
	}

	public interface IDestination
	{
		void SetDestination (Position position, string destination);
	}
}
