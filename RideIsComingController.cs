// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreLocation;
using Foundation;
using MapKit;
using UIKit;
using Plugin.Geolocator.Abstractions;
using System.Linq;
using System.Timers;

namespace UberBlablaCar2Go
{
	public partial class RideIsComingController : UIViewController
	{
		public RideIsComingController (IntPtr handle) : base (handle)
		{
		}

		Driver driver;
		Position riderPosition;
		string destinationName;
		Position destination;

		public void SetDriver (Driver driver, Position position, string destinationName)
		{
			this.riderPosition = position;
			this.driver = driver;
			this.destinationName = destinationName;
		}

		Timer timer;
		private async void Init ()
		{
			try {
				var start = new Position ();

				start.Latitude = driver.Lat;
				start.Longitude = driver.Lon;

				this.destination = await Ride2GoService.GetPosition (this.destinationName);
				var routeResult = await Ride2GoService.GetRoute (start, destination, this.riderPosition);

				var points = routeResult.Locations;

				this.MapView.AddOverlay (MKPolyline.FromCoordinates (points));
				var annotation = new BasicMapAnnotation (new CLLocationCoordinate2D (driver.Lat, driver.Lon), driver.Name);
				this.MapView.AddAnnotation (annotation);
				this.TimeLabel.Text = routeResult.Eta;

				this.timer = new Timer ();
				timer.Interval = 2500;
				timer.Start ();
				timer.Elapsed += this.TimerTick;

			} catch (Exception e) 
			{
				Application.PresentOKAlert ("hallo", e.Message, this, () => { });
			}
		}

		void TimerTick (object sender, ElapsedEventArgs e)
		{
			this.TimerHasTicked ();
		}

		private int pollCount = 0;
		private async void TimerHasTicked ()
		{
			this.driver = await Ride2GoService.GetDriverUpdate (pollCount);

			var driverPosition = new Position () { Latitude = driver.Lat, Longitude = driver.Lon };

			var routeResult = await Ride2GoService.GetRoute (driverPosition, this.riderPosition, null);

			this.InvokeOnMainThread (
				() => { 

				var annotation = new BasicMapAnnotation (new CLLocationCoordinate2D (driver.Lat, driver.Lon), driver.Name);
				this.MapView.RemoveAnnotations (this.MapView.Annotations);
				this.MapView.AddAnnotation (annotation);
				this.TimeLabel.Text = routeResult.Eta;
				pollCount++;
				});


			if (pollCount > 2) 
			{
				this.timer.Elapsed -= TimerTick;
				Application.PresentOKAlert ("Driver arrived", "Look for the blinking car",
											this,
											() => { });
				this.InvokeOnMainThread ( () => {this.TimeLabel.Text = "arrived"; });
				Ride2GoService.MakeTheCarBlink ();
				
			}
		}

		public override void ViewDidLoad ()
		{
			this.MapView.ShowsUserLocation = true;
			this.MapView.Delegate = new MapDelegate ();
			Application.CenterMap (this.MapView, 48.809233, 9.211973, 1.5);
			this.Init ();
			base.ViewDidLoad ();
		}
	}
}
